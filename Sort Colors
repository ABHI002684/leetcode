/*
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.

*/
class Solution {
public:
    void sortColors(vector<int>& nums) {
   solution 1
        // int count0=0,count1=0,count2=0;
        // int n=nums.size();
        // for(int i=0;i<n;i++)
        // {
        //     if(nums[i]==0) count0++;
        //     else if(nums[i]==1) count1++;
        //     else count2++;
        // }
        // for(int i=0;i<n;i++)
        // {
        //     if(i<count0) nums[i]=0;
        //     else if(i<count1+count0) nums[i]=1;
        //     else nums[i]=2;
        // }

solution 2
        int st=0,mid=0;
        int en=nums.size()-1;
        while(mid<=en)
        {
            if(nums[mid]==0){
                swap(nums[mid],nums[st]);
                st++;
                mid++;
            }else if(nums[mid]==1){
                mid++;
            }else if(nums[mid]==2){
                swap(nums[mid],nums[en]);
                en--;
            }
        }

    }
};
