/*
Given the root of a binary tree, replace the value of each node in the tree with the sum of all its cousins' values.
Two nodes of a binary tree are cousins if they have the same depth with different parents.
Return the root of the modified tree.

Note that the depth of a node is the number of edges in the path from the root node to it.

Example 1:
Input: root = [5,4,9,1,10,null,7]
Output: [0,0,0,7,7,null,11]
Explanation: The diagram above shows the initial binary tree and the binary tree after changing the value of each node.
- Node with value 5 does not have any cousins so its sum is 0.
- Node with value 4 does not have any cousins so its sum is 0.
- Node with value 9 does not have any cousins so its sum is 0.
- Node with value 1 has a cousin with value 7 so its sum is 7.
- Node with value 10 has a cousin with value 7 so its sum is 7.
- Node with value 7 has cousins with values 1 and 10 so its sum is 11.

Example 2:
Input: root = [3,1,2]
Output: [0,0,0]
Explanation: The diagram above shows the initial binary tree and the binary tree after changing the value of each node.
- Node with value 3 does not have any cousins so its sum is 0.
- Node with value 1 does not have any cousins so its sum is 0.
- Node with value 2 does not have any cousins so its sum is 0.
 
Constraints:
The number of nodes in the tree is in the range [1, 10^5].
1 <= Node.val <= 10^4
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    vector<long long> levelSum(TreeNode* root) {
        queue<TreeNode*> q;
        vector<long long> ans;
        q.push(root);

        while (!q.empty()) {
            int n = q.size();
            long long sum = 0;
            for (int i = 0; i < n; i++) {
                TreeNode* curr = q.front();
                q.pop();
                sum += curr->val;
                if(curr->left!=NULL) q.push(curr->left);
                if(curr->right!=NULL) q.push(curr->right);
            }
            ans.push_back(sum);
        }

        return ans;
    }

    void updateVal(TreeNode* root, int level, vector<long long>& levelSum) {
        // base case
        if (root == NULL || level + 1 == levelSum.size()) {
            return;
        }

        // calculating cousins sum
        long long nextLevelSum = levelSum[level + 1];
        if (root->left != NULL)
            nextLevelSum -= root->left->val;
        if (root->right != NULL)
            nextLevelSum -= root->right->val;

        // update value of children
        if (root->left != NULL)
            root->left->val = nextLevelSum;
        if (root->right != NULL)
            root->right->val = nextLevelSum;

        // call function for left and right
        updateVal(root->left, level + 1, levelSum);
        updateVal(root->right, level + 1, levelSum);
    }
    TreeNode* replaceValueInTree(TreeNode* root) {
        vector<long long> levelsum = levelSum(root);
        updateVal(root, 0, levelsum);
        root->val = 0;
        return root;
    }
};
