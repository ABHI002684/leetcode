/*
Given two strings s1 and s2, return true if s2 contains a 
permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

Example 1:
Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").

Example 2:
Input: s1 = "ab", s2 = "eidboaoo"
Output: false
 
Constraints:
1 <= s1.length, s2.length <= 10^4
s1 and s2 consist of lowercase English letters.
*/
class Solution {
public:

    int count1[26];
    int count2[26];

    bool equal_permutation(){
        for(int i = 0 ; i< 26 ; i++){
            if(count1[i] != count2[i])return false;
        }
        return true;
    }

    bool checkInclusion(string s1, string s2) {
        if(s1.length()>s2.length())return false;
        int n1 = s1.length();
        int n2 = s2.length();

        
        for(int i = 0 ; i<26 ; i++){
            count1[i]=0;
            count2[i]=0;
        }

        
        for(int i = 0 ; i< n1 ; i++){
            count1[s1[i]-'a']++;
            count2[s2[i]-'a']++;
        }

        if(equal_permutation())return true;

        for(int i = n1 ; i<n2 ; i++){
            count2[s2[i]-'a']++;
            count2[s2[i-n1]-'a']--;
            if(equal_permutation())return true;
        }

        return false;
    }
};
