/*
Given an array of integers nums, sort the array in ascending order and return it.
You must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.

Example 1:
Input: nums = [5,2,3,1]
Output: [1,2,3,5]
Explanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).

Example 2:
Input: nums = [5,1,1,2,0,0]
Output: [0,0,1,1,2,5]
Explanation: Note that the values of nums are not necessairly unique.
 
Constraints:
1 <= nums.length <= 5 * 10^4
-5 * 10^4 <= nums[i] <= 5 * 10^4

*/

class Solution {
public:
vector<int> merge2SortedArrays(vector<int>& nums1,vector<int>& nums2)
{
    int n=nums1.size(),m=nums2.size(),i=0,j=0;
    vector<int> mergedArray;
    while(i<n && j<m)
    {
        if(nums1[i]<=nums2[j]){
            mergedArray.push_back(nums1[i]);
            i++;
        }else{
            mergedArray.push_back(nums2[j]);
            j++;
        }
    }
    while(i<n)
    {
            mergedArray.push_back(nums1[i]);
            i++;
    }
    while(j<m)
    {
        mergedArray.push_back(nums2[j]);
        j++;
    }
    return mergedArray;
}
    vector<int> sortArray(vector<int>& nums) {
        int n=nums.size();
        // base case
        if(n==1) return nums;

        vector<int> left(nums.begin(),nums.begin()+n/2);
        vector<int> right(nums.begin()+n/2,nums.begin()+n);

        left=sortArray(left);
        right=sortArray(right);

        return merge2SortedArrays(left,right);
    }
};
