/*
Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.
Each number in candidates may only be used once in the combination.
Note: The solution set must not contain duplicate combinations.

Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

Example 2:
Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]
 
Constraints:
1 <= candidates.length <= 100
1 <= candidates[i] <= 50
1 <= target <= 30
*/
class Solution {
public:
    void combinations(int index,vector<int>& arr,int target,vector<vector<int>>& ans,vector<int>& v){
        if(target==0){
            ans.push_back(v);
            return;
        }

        for(int i=index;i<arr.size();i++){
            if(i>index && arr[i]==arr[i-1]) continue;

            if(arr[i]>target) break;
            v.push_back(arr[i]);

            combinations(i+1,arr,target-arr[i],ans,v);
            v.pop_back();
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        sort(candidates.begin(),candidates.end());
        vector<int> v;
        combinations(0,candidates,target,ans,v);
        return ans;
    }
};
