/*
You have k lists of sorted integers in non-decreasing order. Find the smallest range that includes at least one number from each of the k lists.
We define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.

Example 1:
Input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]
Output: [20,24]
Explanation: 
List 1: [4, 10, 15, 24,26], 24 is in range [20,24].
List 2: [0, 9, 12, 20], 20 is in range [20,24].
List 3: [5, 18, 22, 30], 22 is in range [20,24].

Example 2:
Input: nums = [[1,2,3],[1,2,3],[1,2,3]]
Output: [1,1]
 
Constraints:
nums.length == k
1 <= k <= 3500
1 <= nums[i].length <= 50
-10^5 <= nums[i][j] <= 10^5
nums[i] is sorted in non-decreasing order.
*/
class Solution {
public:
    vector<int> smallestRange(vector<vector<int>>& nums) {
         vector<pair<int, int>> v;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = 0; j < nums[i].size(); j++) {
                v.push_back({nums[i][j], i});
            }
        }
        sort(v.begin(), v.end());

        int n = nums.size();

        vector<int> ans;
        unordered_map<int, int> mp;
        int lefty = 0;
        int righty = 1e9;
        int l = 0;
        for (int r = 0; r < v.size(); r++) {

            mp[v[r].second]++;
            while (mp.size() == n) {
                if ((v[r].first - v[l].first) < (righty - lefty)) {
                    righty = v[r].first;
                    lefty = v[l].first;
                }
                mp[v[l].second]--;
                if (mp[v[l].second] == 0)
                    mp.erase(v[l].second);
                l++;
            }
        }
        ans = {lefty, righty};
        return ans;
    }
};
