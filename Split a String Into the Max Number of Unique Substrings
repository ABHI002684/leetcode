/*
Given a string s, return the maximum number of unique substrings that the given string can be split into.
You can split string s into any list of non-empty substrings, where the concatenation of the substrings forms the original string. 
However, you must split the substrings such that all of them are unique.

A substring is a contiguous sequence of characters within a string.

Example 1:
Input: s = "ababccc"
Output: 5
Explanation: One way to split maximally is ['a', 'b', 'ab', 'c', 'cc']. Splitting like ['a', 'b', 'a', 'b', 'c', 'cc'] is not valid as you have 'a' and 'b' multiple times.

Example 2:
Input: s = "aba"
Output: 2
Explanation: One way to split maximally is ['a', 'ba'].

Example 3:
Input: s = "aa"
Output: 1
Explanation: It is impossible to split the string any further.
 
Constraints:
1 <= s.length <= 16
s contains only lowercase English letters.
*/
class Solution {
public:
    void maxUniqueSplitHelper(string s, unordered_set<string>& st, int index,
                              int& maxCount) {
        int n = s.size();
        // base case
        if (index == n) {
            maxCount = max(maxCount, (int)st.size());
            return;
        }
        string sub = "";
        for (int i = index; i < n; i++) {
            // string sub=s.substr(index,i-index+1);
            sub += s[i]; // optimize way for getting substrings
            if (st.find(sub) == st.end()) {
                st.insert(sub);
                maxUniqueSplitHelper(s, st, i + 1, maxCount);
                st.erase(sub); // backtrack
            }
        }
    }
    int maxUniqueSplit(string s) {
        int maxCount = INT_MIN;
        // set<string> st;//T.C -> O(logn)
        unordered_set<string> st; // for optimization Average T.C -> O(1)
        maxUniqueSplitHelper(s, st, 0, maxCount);
        return maxCount;
    }
};
