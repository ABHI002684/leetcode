/*
Given the root of a binary tree, each node in the tree has a distinct value.
After deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees).
Return the roots of the trees in the remaining forest. You may return the result in any order.

Example 1:
Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]
Output: [[1,2,null,4],[6],[7]]

Example 2:
Input: root = [1,2,4,null,3], to_delete = [3]
Output: [[1,2,4]]
 
Constraints:

The number of nodes in the given tree is at most 1000.
Each node has a distinct value between 1 and 1000.
to_delete.length <= 1000
to_delete contains distinct values between 1 and 1000.

*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> ans;
    void dfs(TreeNode* root, unordered_map<int,int>& mp,bool is_root){
        if(root==NULL) return;

        if(mp.find(root->val)!=mp.end()){
            dfs(root->left,mp,true);
            dfs(root->right,mp,true);
        }else{
            if(is_root) ans.push_back(root);

            TreeNode* leftNode=root->left;
            TreeNode* rightNode=root->right;
            if(root->left){
                if(mp.find(root->left->val) != mp.end()){
                    root->left=NULL;
                }
            }

            if(root->right){
                if(mp.find(root->right->val) != mp.end()){
                    root->right=NULL;
                }
            }

            dfs(leftNode,mp,false);
            dfs(rightNode,mp,false);
        }
    }
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        unordered_map<int,int> mp;
        for(int i:to_delete)
        {
            mp[i]++;
        }
        dfs(root,mp,true);
        return ans;
    }
};
