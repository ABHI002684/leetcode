/*
You are given a string s and two integers x and y. You can perform two types of operations any number of times.

Remove substring "ab" and gain x points.
For example, when removing "ab" from "cabxbae" it becomes "cxbae".
Remove substring "ba" and gain y points.
For example, when removing "ba" from "cabxbae" it becomes "cabxe".
Return the maximum points you can gain after applying the above operations on s.

Example 1:
Input: s = "cdbcbbaaabab", x = 4, y = 5
Output: 19
Explanation:
- Remove the "ba" underlined in "cdbcbbaaabab". Now, s = "cdbcbbaaab" and 5 points are added to the score.
- Remove the "ab" underlined in "cdbcbbaaab". Now, s = "cdbcbbaa" and 4 points are added to the score.
- Remove the "ba" underlined in "cdbcbbaa". Now, s = "cdbcba" and 5 points are added to the score.
- Remove the "ba" underlined in "cdbcba". Now, s = "cdbc" and 5 points are added to the score.
Total score = 5 + 4 + 5 + 5 = 19.

Example 2:
Input: s = "aabbaaxybbaabb", x = 5, y = 4
Output: 20
 
Constraints:
1 <= s.length <= 10^5
1 <= x, y <= 10^4
s consists of lowercase English letters.

*/
class Solution {
public:
    int pointAfterRemoval(string& s,string s1,int point){
        stack<char>st;
      int n=s.size();
      int gain=0;
      
      for(int i=0;i<n;i++)
      {
        if(st.size()==0){
            st.push(s[i]);
        }else{
            if(s[i]==s1[1] && st.top()==s1[0]){
                st.pop();
                gain+=point;
            }else{
                st.push(s[i]);
            }
        }  
      }

      s="";
      while(st.size()>0)
      {
        s+=st.top();
        st.pop();
      }
      reverse(s.begin(),s.end());

      return gain;
    }
    int maximumGain(string s, int x, int y) {
     string s1="ab",s2="ba";
     if(x>y){
        return pointAfterRemoval(s,s1,x) + pointAfterRemoval(s,s2,y);
     }else{
        return pointAfterRemoval(s,s2,y) + pointAfterRemoval(s,s1,x);
     }
    }
};
