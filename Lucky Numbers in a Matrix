/*
Given an m x n matrix of distinct numbers, return all lucky numbers in the matrix in any order.
A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.

Example 1:
Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]
Output: [15]
Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column.

Example 2:
Input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
Output: [12]
Explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column.

Example 3:
Input: matrix = [[7,8],[1,2]]
Output: [7]
Explanation: 7 is the only lucky number since it is the minimum in its row and the maximum in its column.

Constraints:
m == mat.length
n == mat[i].length
1 <= n, m <= 50
1 <= matrix[i][j] <= 10^5.
All elements in the matrix are distinct.

*/
class Solution {
public:
    vector<int> luckyNumbers (vector<vector<int>>& matrix) {
        vector<int>minimum;
        vector<int>maximum;
        vector<int>ans;
        int m=matrix.size();
        int n=matrix[0].size();
        for(int i=0;i<m;i++)
        {
            int minRow=INT_MAX;
            for(int j=0;j<n;j++)
            {
                minRow=min(minRow,matrix[i][j]);
            }
            minimum.push_back(minRow);
        }
           for(int i=0;i<n;i++)
        {
            int maxCol=INT_MIN;
            for(int j=0;j<m;j++)
            {
                maxCol=max(maxCol,matrix[j][i]);
            }
            maximum.push_back(maxCol);
        }
           for(int i=0;i<minimum.size();i++)
        {
            for(int j=0;j<maximum.size();j++)
            {
                if(minimum[i]==maximum[j]){
                    ans.push_back(minimum[i]);
                }
            }
        }
        return ans;
    }
};
