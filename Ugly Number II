/* 

An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.
Given an integer n, return the nth ugly number.

Example 1:
Input: n = 10
Output: 12
Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.

Example 2:
Input: n = 1
Output: 1
Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.
 
Constraints:
1 <= n <= 1690

*/

class Solution {
public:
    int nthUglyNumber(int n) {
    vector<int> result(1,1);
    int i=0,j=0,k=0;
    while(result.size()<n){
        result.push_back(min({result[i]*2,result[j]*3,result[k]*5}));

        if(result.back()==result[i]*2) i++;
        if(result.back()==result[j]*3) j++;
        if(result.back()==result[k]*5) k++;
    }
    return result.back();
      }
   };
